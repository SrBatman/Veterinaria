
package ventanas;


import java.sql.Connection;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import java.math.BigInteger;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import misclases.Mascota;
import misclases.Cliente;
import system.DataBase;

/**
 *
 * @author Asus
 */
public class PatientManagement extends javax.swing.JFrame {
   DataBase db = new DataBase();
   Connection conexion = db.getConnected();
   DefaultTableModel modelo;
   int xMouse, yMouse;
   Mascota pet = null;
   Cliente owner = null;

    public PatientManagement() {
        initComponents();
        setLocationRelativeTo(null);
        query();
        queryClients();
     
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        inputID = new javax.swing.JTextField();
        inputName = new javax.swing.JTextField();
        inputSpecies = new javax.swing.JTextField();
        inputRace = new javax.swing.JTextField();
        inputAge = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        inputWeight = new javax.swing.JTextField();
        registerButton = new javax.swing.JButton();
        ClientsBox = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        sexBox = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        addData = new javax.swing.JButton();
        editData = new javax.swing.JButton();
        deletData = new javax.swing.JButton();
        showData = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos"));

        jLabel2.setText("Nombre:");

        jLabel3.setText("Especie:");

        jLabel4.setText("Raza:");

        jLabel5.setText("Edad:");

        jLabel6.setText("ID:");

        inputID.setEditable(false);
        inputID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputIDActionPerformed(evt);
            }
        });

        inputName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputNameActionPerformed(evt);
            }
        });

        inputSpecies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputSpeciesActionPerformed(evt);
            }
        });

        inputRace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputRaceActionPerformed(evt);
            }
        });

        jLabel7.setText("Peso:");

        jLabel9.setText("Sexo:");

        inputWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputWeightActionPerformed(evt);
            }
        });

        registerButton.setText("Registrar");
        registerButton.setEnabled(false);
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        ClientsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientsBoxActionPerformed(evt);
            }
        });

        jLabel8.setText("Due√±o:");

        sexBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hembra", "Macho" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addGap(77, 77, 77)
                            .addComponent(inputID, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addGap(46, 46, 46)
                            .addComponent(inputRace, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(259, 259, 259)
                        .addComponent(registerButton))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addGap(48, 48, 48))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(56, 56, 56))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ClientsBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sexBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(inputAge, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))
                                .addComponent(inputWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(inputName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(inputWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel9)
                    .addComponent(sexBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputRace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(ClientsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(registerButton)
                .addContainerGap())
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, -1, 300));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Operaciones"));

        addData.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        addData.setText("Agregar");
        addData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDataActionPerformed(evt);
            }
        });

        editData.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        editData.setText("Modificar");
        editData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDataActionPerformed(evt);
            }
        });

        deletData.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        deletData.setText("Eliminar");
        deletData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletDataActionPerformed(evt);
            }
        });

        showData.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        showData.setText("Mostrar Datos");
        showData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(addData, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(editData, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(deletData, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(showData, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addData, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editData, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deletData, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showData, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 410, 724, -1));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Mascotas"));

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MascotaId", "Nombre", "Especie", "Raza", "Due√±o"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
        });
        Tabla.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                TablaPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(Tabla);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(276, 276, 276))
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 560, 724, 212));

        jPanel1.setBackground(new java.awt.Color(102, 0, 204));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setBackground(new java.awt.Color(255, 51, 51));
        jButton1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Salir");
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 0, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 870, 30));

        jPanel5.setBackground(new java.awt.Color(102, 102, 255));

        jButton2.setText("Empleados");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(636, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 780));

        jLabel1.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        jLabel1.setText("Administracion de Mascotas");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 40, -1, 37));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputNameActionPerformed

    private void inputSpeciesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputSpeciesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputSpeciesActionPerformed

    private void inputRaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputRaceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputRaceActionPerformed

    private void inputWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputWeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputWeightActionPerformed

    private void editDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDataActionPerformed
        // TODO add your handling code here:
        
        registerButton.setEnabled(false);
        modify();
        query();
    }//GEN-LAST:event_editDataActionPerformed

    private void showDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showDataActionPerformed
        // TODO add your handling code here:
        registerButton.setEnabled(false);
         int fila = Tabla.getSelectedRow();
        
        if (fila == -1 || inputID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "No se ha seleccionado una mascota.");
        } else {
     
            JOptionPane.showMessageDialog(this, pet.showData());
            
       }
    }//GEN-LAST:event_showDataActionPerformed

    private void addDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataActionPerformed
        // TODO add your handling code here:
        clearInputs();
        registerButton.setEnabled(true);
        inputID.setEditable(false);

    }//GEN-LAST:event_addDataActionPerformed

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        // TODO add your handling code here:
        addData();
        query();
    }//GEN-LAST:event_registerButtonActionPerformed

    private void deletDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletDataActionPerformed
        // TODO add your handling code here:
        registerButton.setEnabled(false);
        deleteData();
        query();
    }//GEN-LAST:event_deletDataActionPerformed

    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked
        // TODO add your handling code here:
        registerButton.setEnabled(false);
        int fila = Tabla.getSelectedRow();
        
        if (fila == -1){
            JOptionPane.showMessageDialog(this, "No se encontro la fila.");
        } else {
            
            int mascotaId = Integer.parseInt(String.valueOf(Tabla.getValueAt(fila, 0)));
            pet = new Mascota();
            sexBox.removeAllItems();

            
            String sql = "SELECT m.*, c.* FROM mascota m JOIN pet_and_owner pao ON m.mascotaId = pao.pet JOIN cliente c ON pao.owner = c.clienteId WHERE m.mascotaId = ?";
            try {
            PreparedStatement ps = conexion.prepareStatement(sql);
            ps.setInt(1, mascotaId);
            ResultSet rs = ps.executeQuery();
            
             while(rs.next()){
                 
                 String mNombre = rs.getString("m.nombre");
                 String mEspecie = rs.getString("m.especie");
                 String mRaza = rs.getString("m.raza");
                 int mEdad = rs.getInt("m.edad");
                 float mPeso = rs.getFloat("m.peso");
                 String mSexo = rs.getString("m.sexo");
                 String mEstatus = rs.getString("m.estatus");
                 
                 pet.setPetId(mascotaId);
                 pet.setNombre(mNombre);
                 pet.setEspecie(mEspecie);
                 pet.setRaza(mRaza);
                 pet.setEdad(mEdad);
                 pet.setPeso(mPeso);
                 pet.setSexo(mSexo);
                 pet.setEstatus(mEstatus);
                 
                 
                 owner = new Cliente(
                 rs.getString("c.email"),
                rs.getString("c.tel_cel"),
              rs.getString("c.direccion"), 
                   rs.getString("c.colonia"), 
                   Integer.parseInt(rs.getString("c.zp")), 
                  rs.getString("c.nombre"), 
                  rs.getString("c.apellidoP"), 
                  rs.getString("c.apellidoM"), 
                   rs.getInt("c.clienteId"), 
              rs.getString("c.tel_casa")
                 );
                 
                 pet.setOwner(owner);
                 
                 inputID.setText(""+mascotaId);
                 inputName.setText(mNombre);
                 inputSpecies.setText(mEspecie);
                 inputRace.setText(mRaza);
                 inputAge.setText(""+mEdad);
                 inputWeight.setText(""+mPeso);
                 
                 sexBox.addItem(mSexo);
                 sexBox.addItem(mSexo.equals("Macho") ? "Hembra" : "Macho");
                 
             
                 
            }
           
        }catch (SQLException e){
            System.out.println("Hubo un error para consultar los datos: " + e);
        }
           
            
        }
    }//GEN-LAST:event_TablaMouseClicked

    private void TablaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_TablaPropertyChange
        // TODO add your handling code here:
    
    }//GEN-LAST:event_TablaPropertyChange

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        // TODO add your handling code here:
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_jPanel1MousePressed

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        // TODO add your handling code here:
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse, y- yMouse);
    }//GEN-LAST:event_jPanel1MouseDragged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        ServicesManagement em = new ServicesManagement();
        em.setVisible(true);
        em.pack();
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void inputIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputIDActionPerformed

    private void ClientsBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientsBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClientsBoxActionPerformed

    private void addData(){
        Map<String, String> lista = new LinkedHashMap<>();
        String errorMessage = "";
        
        lista.put("Nombre", inputName.getText());
        lista.put("Especie", inputSpecies.getText());
        lista.put("Raza", inputRace.getText());
        lista.put("Edad", inputAge.getText());
        lista.put("Peso", inputWeight.getText().toLowerCase().replace("kg", ""));
        lista.put("Sexo", sexBox.getSelectedItem().toString());
        lista.put("Estatus", "Ninguno");
        lista.put("Owner", ClientsBox.getSelectedItem().toString());
        
        
        for (Map.Entry<String, String> entry : lista.entrySet()) {
            if (entry.getValue().isEmpty()) {
                errorMessage += entry.getKey() + ", ";
            }
        }
        
                 int lastIndex = errorMessage.lastIndexOf(",");
        if (lastIndex >= 0) {
            errorMessage = errorMessage.substring(0, lastIndex) + "." + errorMessage.substring(lastIndex + 1);
        }
        if (!errorMessage.isEmpty()){
            JOptionPane.showMessageDialog(this, "Los siguientes campos deben ser completados: " + errorMessage);
        } else {
            pet = new Mascota();
            if (pet.setEdad(inputAge.getText())){
                if (pet.setPeso(inputWeight.getText())){
                    if (lista.get("Owner").equals("Ninguno")){
                        JOptionPane.showMessageDialog(this, "Debes seleccionar el due√±o de la mascota.");
                    } else {
                        db.insertPetData(lista);
                    }               
                } else {
                     JOptionPane.showMessageDialog(this, "El peso debe ser numerica.");
                }
                
            } else {
                JOptionPane.showMessageDialog(this, "La edad debe ser numerica.");
            }

        }
        
        clearTable();
        clearInputs();
        clearBox();
        queryClients();
    }
    
    private void query(){
        String sql = "SELECT m.mascotaId, m.nombre, m.especie, m.raza, c.clienteId, c.nombre, c.apellidoP, c.apellidoM FROM mascota m JOIN pet_and_owner pao ON m.mascotaId = pao.pet JOIN cliente c ON pao.owner = c.clienteId";
        try {
            Statement st = conexion.createStatement();
            ResultSet rs = st.executeQuery(sql);
            Object[] mascota = new Object[5];
            modelo = (DefaultTableModel) Tabla.getModel();
            
            while(rs.next()){
                mascota [0] = rs.getInt("m.mascotaId");
                mascota [1] = rs.getString("m.nombre");
                mascota [2] = rs.getString("m.especie");
                mascota [3] = rs.getString("m.raza");
                mascota [4] = rs.getString("c.nombre") + " " + rs.getString("c.apellidoP")+ " " + rs.getString("c.apellidoM");
                
                modelo.addRow(mascota);
                
            }
            Tabla.setModel(modelo);
        }catch (SQLException e){
            System.out.println("Hubo un error para consultar los datos: " + e);
        }
    }
    
    private void queryClients(){
        ClientsBox.addItem("Ninguno");
        String sql = "select nombre, apellidoP, apellidoM from cliente";
        try {
            Statement st = conexion.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                ClientsBox.addItem(rs.getString("nombre") + " " + rs.getString("apellidoP")+ " " + rs.getString("apellidoM"));
            }
        }catch (SQLException e){
            System.out.println("Hubo un error para consultar los datos: " + e);
        }
    }
    
    private void modify(){
         int fila = Tabla.getSelectedRow();
        
        if (fila == -1 || inputID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "No se ha seleccionado una mascota.");
        } else {
        Map<String, String> lista = new LinkedHashMap<>();
        String errorMessage = "";
        
        lista.put("Nombre", inputName.getText());
        lista.put("Especie", inputSpecies.getText());
        lista.put("Raza", inputRace.getText());
        lista.put("Edad", inputAge.getText());
        lista.put("Peso", inputWeight.getText().toLowerCase().replace("kg", ""));
        lista.put("Sexo", sexBox.getSelectedItem().toString());
        lista.put("Estatus", "Ninguno");
        lista.put("Owner", ClientsBox.getSelectedItem().toString());
      
        
        for (Map.Entry<String, String> entry : lista.entrySet()) {
            if (entry.getValue().isEmpty()) {
                errorMessage += entry.getKey() + ", ";
            }
        }
        
                 int lastIndex = errorMessage.lastIndexOf(",");
        if (lastIndex >= 0) {
            errorMessage = errorMessage.substring(0, lastIndex) + "." + errorMessage.substring(lastIndex + 1);
        }
        if (!errorMessage.isEmpty()){
            JOptionPane.showMessageDialog(this, "Los siguientes campos no pueden estar vacios: " + errorMessage);
        } else {
             
            if (pet.setEdad(inputAge.getText())){
                if (pet.setPeso(inputWeight.getText())){
                    if (lista.get("Owner").equals("Ninguno")){
                        JOptionPane.showMessageDialog(this, "Debes seleccionar el due√±o de la mascota.");
                    } else {
                        db.editPetData(lista, Integer.parseInt(inputID.getText()));
                    }               
                } else {
                     JOptionPane.showMessageDialog(this, "El peso debe ser numerica.");
                }
                
            } else {
                JOptionPane.showMessageDialog(this, "La edad debe ser numerica.");
            }
        }
       }
        
        clearTable();
        clearInputs();
    }
    
    private void deleteData(){
         int fila = Tabla.getSelectedRow();
        
        if (fila == -1 || inputID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "No se ha seleccionado una mascota.");
        } else {
       String script = "delete from pet_and_owner where pet=?";
       int r = 0;
       try{
                PreparedStatement ps = conexion.prepareStatement(script);
                ps.setInt(1, Integer.parseInt(inputID.getText()));
                r = ps.executeUpdate();
                 
                if(r != 0 ){
                      String sql = "delete from mascota where mascotaId=?";
       
       try {
                PreparedStatement ps2 = conexion.prepareStatement(sql);
                ps2.setInt(1, Integer.parseInt(inputID.getText()));
                r = ps2.executeUpdate();
                 
                if(r != 0 ){
                    JOptionPane.showMessageDialog(this, "¬°Se eliminaron los datos correctamente!");
                }
                    
            } catch (SQLException err) {
                
                System.out.println("Hubo un error al eliminar datos en la tabla mascota: " + err);
                
            }
                }
                    
            } catch (SQLException err) {
                
                System.out.println("Hubo un error al eliminar datos en la tabla mascota: " + err);
                
        }     
     
        }
      
        clearTable();
        clearInputs();
    }
    
    
    
    private void clearTable(){
        while (Tabla.getRowCount() > 0){
        modelo.removeRow(0);
        }
    }
    
    private void clearBox(){
        ClientsBox.removeAllItems();
    }
    
    public void clearInputs(){
        inputID.setText("");
        inputName.setText("");
        inputSpecies.setText("");
        inputRace.setText("");
        inputAge.setText("");
        inputWeight.setText("");
      
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientManagement().setVisible(true);
            }
        });
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ClientsBox;
    private javax.swing.JTable Tabla;
    private javax.swing.JButton addData;
    private javax.swing.JButton deletData;
    private javax.swing.JButton editData;
    private javax.swing.JTextField inputAge;
    private javax.swing.JTextField inputID;
    private javax.swing.JTextField inputName;
    private javax.swing.JTextField inputRace;
    private javax.swing.JTextField inputSpecies;
    private javax.swing.JTextField inputWeight;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton registerButton;
    private javax.swing.JComboBox<String> sexBox;
    private javax.swing.JButton showData;
    // End of variables declaration//GEN-END:variables
}
